2:37 2007-8-21 GMT+8 version 341
* Fixed the pdCif multi-block-in-one-range issue, use multiple Ranges to represent the blocks.
* Added a name attribute to Range class
* Changed the name of class Range to Block, and many other places related
* Updated some inconsistent places in the source code
* Updated README with instructions on how to extend the library
* Removed all sample files that are not explicitly-declared distributable
* Added a shell script to download the sample files
* Other slight changes

20:13 2007-8-19 GMT+8 version 337
* Removed all non-NULL assertions after new()
* Re-wrote the Implementation of UxdDataSet, rmoved the UxdLikeDataSet class
* Found some new sample files (raw_v2, udf, uxd, pdCIF) to test the existing code. Fixed bugs to process pdCIF files.
* Added support to the Philips Raw Scan format (.RD).
* Some other trivial changes, such as changing to use fmt_info.ftype in the Ctor, etc
* Added the LGPL 2.1 text file as COPYING

9:47 2007-8-18 GMT+8 version 335
* Changed to use Class Column to represent a 1-D data
* If SPE is linear,  set fixed_step = true
* Export_xy_file is modified with necessary changes, and output column names of x, y, stddev if they exist
* Depressed exceptions in check(): only return a boolean value.
* Changed to Read multiple columns in a range of pdCIF format, the uncertainty is treated as a separate column
* Moved stream& arg from Ctors to load_data() member functions. Got rid of the stream &/* member f in DataSet, passed to other members functions if necessary
* Added the clear() function in DataSet.
* Re-wrote one of the uxd-like formats: Rigaku_dat
* Some other trivial changes

1:38 2007-8-14 GMT+8 version 333
* Added support to pdCIF format (Crystallographic Information File for Powder Diffraction).

3:09 2007-8-9 GMT+8 version 332
* Made some necessary changes, got rid of the assumptions that the input is always correct. program defensively, check every point where error may occur.

8:17 2007-8-7 GMT+8 version 329
* Changed "ChangLog" to the right order
* Updated README to explicitly give some restrictions of supported formats (VAMAS and WinSpec)
* DataSet and all derived classes have only one Ctor, accepting "istream&" argument only
* Removed XXXDataSet::init() & is_filetype. Type checking is moved to the static check() member function
* Other slight  changes, such as updating comments, moving 'include "util.h"' from xxxDataSet.h to .cpp files, changing to use ifstream& instead of ifstream* inside DataSet.
* Added some handling statements to avoid raw_v2v3 be mistaken as raw_v1, rigaku_dat as text.

21:34 2007-8-5 GMT+8 version 328
* Some bugs fixed
* Changed to avoid use seekg() in the file reading stream
* Gave up PDP-endian support
* Reimplement the philipse-udf format
* XXXDataSet's ctor can also accept istream& argument.
* Some other changes following Marcin's advice.

6:02 2007-8-3 GMT+8 version 326
* Added new format support of Princeton Instruments WinSpec SPE format
* Extended some functions in util.cpp, 
* Fixed a bug in function le_to_host()

17:30 2007-7-28 GMT+8 version 325
* Removed "common.h" file, and moved the needed functions to util.h
* Move docs about file formats from "IMPLEMENTATION REF" in test/*/README and from docs/formats to ds_*.cpp files. Integrated the format info together into ds_*.cpp files
* Cleaned up some code, /test -> /samples, update README and all comments, rm /docs
* Added a "3rdparty" directory, put some of the boost lib headers there, in case that client does not have the boost library installed.
* Changed to use struct FormatInfo to handle the format info, instead of using global arrays. Based on Marcin's advice with some modifications, e.g, the meanings of field "name" and "desc" are exchanged; added xy_ftype field etc.
* Added format check for uxd file format.

0:56 2007-7-25 GMT+8 version 320
* Added a README file in every sub dir in ./test, to describe some related info about the sample files and format implementation in xylib.
* Improved xylib::guess_file_type(): can guess the file type by preview the file content.
* Finished testmain.cpp. which can test all of the sample files (only on POSIX OSes, not implemented on Windows), and can also just export user specified input / output files.
* re-organized some directories in ./test to make it more clear
* Used my_getline() and seekg() instead of peek_line, to avoid reading every line twice.
* Cleaned up code and some other slight changes, according to Marcin's advice.

3:32 2007-7-21 GMT+8 version 317
* changed the existing code following Marcin's advice (removed user-defined type "fp", left-hand & right-hand, put xylib::util into separated files, etc..)
* added meta-info exporting in export_to_xy() with an optional param to determine whether export meta-info together with the xy data
* new format support: Philips_udf format
* Used a class "UxdLikeDataSet" to  present all UXD-like formats (so far, they are UXD, Rigaku_dat and Philips_udf format).
* Re-wrote code of the UXD format parsing and Rigaku_dat format parsing with UxdLikeDataSet

13:55 2007-7-13 GMT+8 version 315
* re-implemented the VAMAS reading function for license and mantainability considerations. Besides, many file-scope/range-scope meta variables are read

3:11 2007-7-10 GMT+8 version 314
* Reorganized all of the code into a new OO framework, make the code much more clear
* Separated code of the non-abstract classes for specific filetypes into different files, in case that xylib.cpp & xylib.h are too long and too complex
* Re-write a lot of code: simplify the code of reading Brucker Raw format v1 and v2v3
* Use an enum xy_ftype to describe file type to unify the file types, to get the file types and type descriptions
* Write a generic function to handle the UXD-like files (e.g, rigaku_dat files), not finished

13:13 2007-6-29 GMT+8 version 310
* Re-wrote some of the code in load_vamas_file
* Changed existing code to handle the "endian issue" and the "fixed-size int data type issue".
For the 1st issue, use endian.hpp to determine the endian of the machine, then exchange the bytes manually if necessary. For the 2nd issue, use fixed-size data types defined in <boost/cstdint.hpp> instead of raw types.

3:37 2007-6-21 GMT+8 version 309
* Added file format support: "vamas-iso14976 file". However, the MAPPING mode file (which is a 2-ary function, (x,y)->z) is not handled. 
* To simplify the code, add several helper functions. e.g. read_line_int()

1:03 2007-6-13 GMT+8 version 306
* Added the docs/ directory to contain referenceable docs. "formats.txt" is a doc describing formats and other informatino about the completed formats.
* Added file format support: "Rigaku dat file". Tried to use Boost::regex to handle this text-based data file. Although this is not necessary in this case, maybe it will simplify the code in my opinion.
* Added the "file_type" strings to usage function


