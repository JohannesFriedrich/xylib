1:03 2007-6-13 GMT+8 version 306
* Added the docs/ directory to contain referenceable docs. "formats.txt" is a doc describing formats and other informatino about the completed formats.
* Added file format support: "Rigaku dat file". Tried to use Boost::regex to handle this text-based data file. Although this is not necessary in this case, maybe it will simplify the code in my opinion.
* Added the "file_type" strings to usage function

3:37 2007-6-21 GMT+8 version 309
* Added file format support: "vamas-iso14976 file". However, the MAPPING mode file (which is a 2-ary function, (x,y)->z) is not handled. 
* To simplify the code, add several helper functions. e.g. read_line_int()

13:13 2007-6-29 GMT+8 version 310
* Re-write some of the code in load_vamas_file
* Change existing code to handle the "endian issue" and the "fixed-size int data type issue".
For the 1st issue, use endian.hpp to determine the endian of the machine, then exchange the bytes manually if necessary. For the 2nd issue, use fixed-size data types defined in <boost/cstdint.hpp> instead of raw types.

3:11 2007-7-10 GMT+8 version 314
* Reorganized all of the code into a new OO framework, make the code much more clear
* Separated code of the non-abstract classes for specific filetypes into different files, in case that xylib.cpp & xylib.h are too long and too complex
* Re-write a lot of code: simplify the code of reading Brucker Raw format v1 and v2v3
* Use an enum xy_ftype to describe file type to unify the file types, to get the file types and type descriptions
* Write a generic function to handle the UXD-like files (e.g, rigaku_dat files), not finished

13:55 2007-7-13 GMT+8 version 315
* re-implement the VAMAS reading function for license and mantainability considerations. Besides, many file-scope/range-scope meta variables are read

3:32 2007-7-21 GMT+8 version 317
* changed the existing code following Marcin's advice (removed user-defined type "fp", left-hand & right-hand, put xylib::util into separated files, etc..)
* added meta-info exporting in export_to_xy() with an optional param to determine whether export meta-info together with the xy data
* new format support: Philips_udf format
* Used a class "UxdLikeDataSet" to  present all UXD-like formats (so far, they are UXD, Rigaku_dat and Philips_udf format).
* Re-wrote code of the UXD format parsing and Rigaku_dat format parsing with UxdLikeDataSet

0:56 2007-7-25 GMT+8 version 320
* Added a README file in every sub dir in ./test, to describe some related info about the sample files and format implementation in xylib.
* Improved xylib::guess_file_type(): can guess the file type by preview the file content.
* Finished testmain.cpp. which can test all of the sample files (only on POSIX OSes, not implemented on Windows), and can also just export user specified input / output files.
* re-organized some directories in ./test to make it more clear
* Used my_getline() and seekg() instead of peek_line, to avoid reading every line twice.
* Cleaned up code and some other slight changes, according to Marcin's advice.

17:30 2007-7-28 GMT+8 version 325
* Removed "common.h" file, and moved the needed functions to util.h
* Move docs about file formats from "IMPLEMENTATION REF" in test/*/README and from docs/formats to ds_*.cpp files. Integrated the format info together into ds_*.cpp files
* Cleaned up some code, /test -> /samples, update README and all comments, rm /docs
* Added a "3rdparty" directory, put some of the boost lib headers there, in case that client does not have the boost library installed.
* Changed to use struct FormatInfo to handle the format info, instead of using global arrays. Based on Marcin's advice with some modifications, e.g, the meanings of field "name" and "desc" are exchanged; added xy_ftype field etc.